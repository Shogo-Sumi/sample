〇7.10で作成した動的配列のpushの平均時間計算量。

初期の配列のサイズは4。これに対して、配列の容量がいっぱいになると、容量を2倍にした新しい配列を作成する。
n回のプッシュを行うと仮定する（nは十分に大きい)

配列の容量は4,8,16,32,...,2^kと増加する。
nの要素を追加すると、再配置は容量がnを超えるまで発生する。容量が2^kの時、最大要素はn^kなので、再配置の回数はlog2(n)回。
各要素での再配置のコピーについては、log2n回発生する。
再配置の際のコピーの回数は、2^0+2^1+2^2,,,2^(log2n)
等比数列の和の公式：https://ja.wikipedia.org/wiki/%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97

a(r^n-1)/r-1

a=1,r=2であるため
r^n-1
n=log2nであるため
2^(log2n)-1

2^(log2n)-1=<n-1であるため、コピー回数の最大はn
よって各コピー回数はnで割れば求められるため計算量はO(1)

・copyA
初期配列の確保として、array.lengthで配列を用意している。
その後forループでresult[i]=array[i]をn回実施。
よって初期化にO(n)の計算量がかかり、コピーにO(n)の計算量がかかる。
よって相計算量はO(n)


・copyB
初期配列として空配列を確保。
その後、配列の長さだけfor文を回し、pushで各要素を追加。
初期配列の確保の計算量はO(1)
pushについては、配列の長さ(n)回だけ実施。
よって計算量はO(n)



